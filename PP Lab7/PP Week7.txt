C:\Program Files (x86)\Microsoft SDKs\MPI\Lib\x86

C:\Program Files (x86)\Microsoft SDKs\MPI\Include

----------------------------------------------------------------------------------------

#include<stdio.h>
#include<mpi.h>
#include<stdlib.h>
int main(int argc, char* argv[])
{
	int myid, numprocs, namelen;
	char processor_name[MPI_MAX_PROCESSOR_NAME];

	MPI_Init(&argc, &argv);		// starts MPI
	MPI_Comm_rank(MPI_COMM_WORLD, &myid);		//get current process id
	MPI_Comm_size(MPI_COMM_WORLD, &numprocs);		//get number of processor
	MPI_Get_processor_name(processor_name, &namelen);

	if (myid == 0) {
		printf("%s: Hello world from process %d \n", processor_name, myid);
	}
	MPI_Finalize();

	return 0;
}


----------------------------------------------------------------------------------------

W7 Q1

#include<stdio.h>
#include<mpi.h>
#include<math.h>
#include<stdlib.h>

int power(int x, int rank) {
	int mul = pow(x, rank);
	return mul;
}
int main(int argc, char* argv[])
{
	int myid, numprocs, namelen;
	char processor_name[MPI_MAX_PROCESSOR_NAME];

	MPI_Init(&argc, &argv);		// starts MPI
	MPI_Comm_rank(MPI_COMM_WORLD, &myid);		//get current process id
	MPI_Comm_size(MPI_COMM_WORLD, &numprocs);		//get number of processor
	MPI_Get_processor_name(processor_name, &namelen);

	if (myid == 0) {
		printf("%s: Hello world from process %d \n", processor_name, myid);
		int n;
		printf("Enter a number: ");
		scanf_s("%d", &n);
		int ans = pow(n, myid);
		printf("The value of %d ^ %d = %d", n, myid, ans);
	}
	MPI_Finalize();

	return 0;
}